version: '3.1'
services:
  db:
    build:
      context: ./db
      dockerfile: Dockerfile
    container_name: postgres_db
    restart: always
    env_file: ".env"
    ports:
      - "5432:5432"
    volumes:
      - data:/var/lib/postgresql/data:rw
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydatabase"]
      interval: 5s
      timeout: 5s
      retries: 5

  auth-service:
    build: ./backend/auth-service
    container_name: auth_service
    restart: always
    command: >
      sh -c "
        while ! nc -z db 5432; do
          sleep 1
        done &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --log-level $${LOG_LEVEL}
      "
    env_file: ".env"
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./backend/auth-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/auth/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  frontend:
    build: ./frontend
    container_name: frontend
    restart: always
    env_file: ".env"
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/dist
    networks:
      - app-network
    depends_on:
      - auth-service
      - product-catalog-service
      - recommendation-service

  rabbitmq:
    image: "rabbitmq:management"
    container_name: rabbitmq
    restart: always
    ports:
      - "15672:15672"
      - "5672:5672"
    env_file: ".env"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - app-network

  product-catalog-service:
    build: ./backend/product-catalog-service
    container_name: product_catalog_service
    restart: always
    command: >
      sh -c "
        while ! nc -z db 5432; do
          sleep 1
        done &&
        while ! nc -z rabbitmq 5672; do
          sleep 1
        done &&
        /app/main
      "
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "8080:8080"
    env_file: ".env"
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8080/products"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - app-network

  recommendation-service:
    build:
      context: ./backend/recommendation-service
      dockerfile: Dockerfile
    container_name: recommendation_service
    restart: always
    command: >
      sh -c "
        while ! nc -z db 5432; do
          sleep 1
        done &&
        while ! timeout 2 bash -c '</dev/tcp/rabbitmq/5672'; do
          sleep 2;
        done &&
        python main.py
      "
    env_file: ".env"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./backend/recommendation-service:/app
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    env_file: ".env"
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - app-network

volumes:
  data:

networks:
  app-network:
    driver: bridge
